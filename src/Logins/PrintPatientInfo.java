/*
This file reads from and writes to external files
 */

package Logins;
//Imports required for file writing
import java.util.*;
import java.io.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author Vinayak Saxena
 */

public class PrintPatientInfo extends javax.swing.JFrame {
    //Introducing array
    String[][] patientinfo = new String[20000][9];
    
    
    /**
     * Creates new form PrintPatientInfo
     */
    public PrintPatientInfo() {
        initComponents();
    }
    public PrintPatientInfo(String[][]a){
        initComponents();
        //Original array gets equaled to the global array being passed from other files
        patientinfo=a;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        Back = new javax.swing.JButton();
        Search_Name = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        First_Name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Last_Name = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ScrollPane = new javax.swing.JScrollPane();
        Output = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        File_Name = new javax.swing.JTextField();
        Search_File = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Welcome to the Kitchener Hospital");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        Back.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Back.setForeground(new java.awt.Color(255, 0, 51));
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        Search_Name.setForeground(new java.awt.Color(0, 255, 0));
        Search_Name.setText("Search and Print");
        Search_Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_NameActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("Input by File (\"file.txt\"):");

        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("First Name:");

        jLabel6.setForeground(new java.awt.Color(0, 0, 255));
        jLabel6.setText("Last Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Output");

        Output.setColumns(20);
        Output.setRows(5);
        ScrollPane.setViewportView(Output);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 255));
        jLabel7.setText("Search by Name:");

        jLabel8.setForeground(new java.awt.Color(0, 0, 255));
        jLabel8.setText("File Name:");

        Search_File.setForeground(new java.awt.Color(0, 255, 0));
        Search_File.setText("Search and Input");
        Search_File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_FileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(77, 77, 77))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(17, 17, 17)
                                        .addComponent(Last_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(17, 17, 17)
                                        .addComponent(First_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(File_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Search_File, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Search_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jLabel7)
                    .addContainerGap(443, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(Search_Name)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(First_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Last_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Search_File))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(File_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(148, 148, 148)
                    .addComponent(jLabel7)
                    .addContainerGap(336, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Method for output. Takes in a 2d array, and a integer, then prints that row
    public String outputformatted(String[][]a,int i){
        String output = "First Name: "+a[i][0]+"\n"+
                "Last Name: "+a[i][1]+"\n"+
                "Triage Priority: "+a[i][2]+"\n"+
                "Blood Pressure: "+a[i][3]+"\n"+
                "Body Temperature: "+a[i][4]+"\n"+
                "Pulse: "+a[i][5]+"\n"+
                "Breathing Rate: "+a[i][6]+"\n"+
                "Description: "+a[i][7]+"\n"+"\n";
       
        return output;
    }
    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        //Close current screen, go back to patientinfo screen 
        setVisible(false);
        new ListInfo(patientinfo).setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_BackActionPerformed

    private void Search_NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_NameActionPerformed
        // TODO add your handling code here:
        //Int x is used to see if a patient has been found or not
        int x=0;
        Output.setText("");
        
        /*
        Following block of code uses linear search to search for a patient entered.
        It loops through the array, and see if any of the first name+ last name values
        match the inputted data. If it does, then the output function is used to output data.
        */
        String firstname, lastname,output = null;
        int counter = Integer.parseInt(patientinfo[0][8]);
        firstname=(First_Name.getText()).toString();
        lastname=(Last_Name.getText()).toString();
        First_Name.setText("");
        Last_Name.setText("");
        for (int i = 0; i<counter; i++){
            if(((patientinfo[i][0]).equals(firstname))&&(patientinfo[i][1]).equals(lastname)){
                    x=1;
                    //Output is a string variable that holds all the data of the searched user
                    output = outputformatted(patientinfo,i);
                    Output.append(outputformatted(patientinfo,i));
            } 
        }
        
        
        
        
        //If a user was not found, aka x is 0 then output that user was not found.
        if(x==0){
            Output.append("Patient Not Found."+"\n"+"Please check your spelling.");
        }
        
        

//If a user was found, aka x is 1 then go through the file making process
        if(x==1){
        try{
            //Filename is randomly generated. THe format is PatientInfo, follwed by a random
            //number between 1 and 1000, followed by .txt
            String filename = "PatientInfo"+(1 + (int)(Math.random()*(1000-1)+1))+".txt";
            FileWriter writer = new FileWriter(filename, true);
            
            //Writes the output that holds all data to the file
            writer.write(output);
            writer.close(); 
            
            //When a file has been exported, a message will show up that includes the file name.
            JOptionPane.showMessageDialog(rootPane, "Success. File name: "+filename);
        } 
        
        
        catch (Exception e){
            //If there is an error or corruptuion, then show error message
            JOptionPane.showMessageDialog(rootPane, "Error");
        }
        }
        
        First_Name.setText("");
        Last_Name.setText("");
       
        
    }//GEN-LAST:event_Search_NameActionPerformed

    private void Search_FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_FileActionPerformed
        // TODO add your handling code here:
        
        //Since data is being entered, I introduced a counter variable
        int counter;
        //Variable used so that counter is not improperly incremented later in the code
        int counter_error_checker=0;
        
        //If the place where a counter is supposed to is null, then that means a user has
        //not entered any information, so set the counter to 0
        if(patientinfo[0][8]==null){
            counter=0;
        }else{
            //If the value is non-null, then take the counter value and use that placeholder
            //to enter data
            counter=Integer.parseInt(patientinfo[0][8]);
        }
        
        //info holds all the data from the file
        String[]info = new String[8];
        

        //500 word limit of description
        String[]desc = new String[500];
        //this counts how many words have been entered in description
        int desc_counter=0;
        
        
        
        try{
            //file name is the file name entered by user
            String filename = File_Name.getText().toString();
            //Scans inputted file
            Scanner x = new Scanner(new File(filename));
            //This is used to differentiate between all factual information and 
            //the description. Since the file will follow a specific format, we don't have
            //to worry about double words, and indexes from 0 to 6 will have factual information
            //After x has gone through the first 7 items (0 to 6), y will increment, and it will
            //move to the description part of the file
            int y = 0;
            
            //While x has a word next to it, keep looping
            while(x.hasNext()){
                if(y==0){
                info[0] = x.next();//First Name
                info[1] = x.next();//Last Name
                info[2] = x.next();//Triage
                info[3] = x.next();//BP
                info[4] = x.next();//BT
                info[5] = x.next();//Pulse
                info[6] = x.next();//BR
                y++;
                }
                
                //Adds data to different indexes of desc array
                if (y>0){
                    desc[desc_counter]=x.next();
                    desc_counter+=1;
                }
                
                
            }
            //Message saying file imported correctly
            JOptionPane.showMessageDialog(rootPane, "File Imported Successfully.");
            //Error Catching
        } catch(Exception e){
            counter_error_checker++;
            JOptionPane.showMessageDialog(rootPane, "File not Found.");
            
        }
        //This variable will hold the description
        String desc_combined="";
        
        //Loops through the description array and adds all the words together into desc_combined
        for(int i = 0; i<desc_counter;i++){
            desc_combined=desc_combined+desc[i]+" ";
        }
        //Sets last value of info to description
        info[7]=desc_combined;
        
        //Loop to set all of info values imported from file to the patientinfo 2d array
        for (int i = 0; i<8;i++){
            patientinfo[counter][i]=info[i];
            
            
        }
        //If file was successfully imported, then increase counter by 1, and set the new counter value
        //to the array position that holds counter
        if(counter_error_checker==0){
            counter+=1;
            patientinfo[0][8]=Integer.toString(counter);
            
        }
        
        File_Name.setText("");
       
        
    }//GEN-LAST:event_Search_FileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrintPatientInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrintPatientInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrintPatientInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrintPatientInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrintPatientInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JTextField File_Name;
    private javax.swing.JTextField First_Name;
    private javax.swing.JTextField Last_Name;
    private javax.swing.JTextArea Output;
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JButton Search_File;
    private javax.swing.JButton Search_Name;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    // End of variables declaration//GEN-END:variables
}
