/*
This program searches for a user desired by user input
 */
package Logins;

import java.util.*;
/**

 */
public class ListInfo extends javax.swing.JFrame {
    //Introducing array
    String[][] patientinfo = new String[20000][9];
    

    /**
     * Creates new form ListInfo
     */
    public ListInfo() {
        initComponents();
    }
    public ListInfo(String a[][]){
        //Setting passed array to patientinfo array
        initComponents();
        patientinfo=a;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        List_ALL = new javax.swing.JButton();
        ScrollPane = new javax.swing.JScrollPane();
        Output = new javax.swing.JTextArea();
        Back = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        First_Name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Last_Name = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Search_Name = new javax.swing.JButton();
        Alphabetical = new javax.swing.JButton();
        Alphabetical_Last_Name = new javax.swing.JButton();
        Triage_Priority = new javax.swing.JButton();
        Print_Patient_Info = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(600, 500));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Output");

        List_ALL.setForeground(new java.awt.Color(0, 255, 0));
        List_ALL.setText("LIST ALL");
        List_ALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                List_ALLActionPerformed(evt);
            }
        });

        Output.setColumns(20);
        Output.setRows(5);
        ScrollPane.setViewportView(Output);

        Back.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Back.setForeground(new java.awt.Color(255, 0, 51));
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Welcome to the Kitchener Hospital");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("Search by Name:");

        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("First Name:");

        jLabel6.setForeground(new java.awt.Color(0, 0, 255));
        jLabel6.setText("Last Name:");

        Search_Name.setForeground(new java.awt.Color(0, 255, 0));
        Search_Name.setText("Search");
        Search_Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_NameActionPerformed(evt);
            }
        });

        Alphabetical.setForeground(new java.awt.Color(0, 255, 0));
        Alphabetical.setText("LIST ALPHABETICAL (First Name)");
        Alphabetical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlphabeticalActionPerformed(evt);
            }
        });

        Alphabetical_Last_Name.setForeground(new java.awt.Color(0, 255, 0));
        Alphabetical_Last_Name.setText("LIST ALPHABETICAL (Last Name)");
        Alphabetical_Last_Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Alphabetical_Last_NameActionPerformed(evt);
            }
        });

        Triage_Priority.setForeground(new java.awt.Color(255, 0, 0));
        Triage_Priority.setText("LIST Triage Priority");
        Triage_Priority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Triage_PriorityActionPerformed(evt);
            }
        });

        Print_Patient_Info.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Print_Patient_Info.setForeground(new java.awt.Color(255, 0, 51));
        Print_Patient_Info.setText("Print Patient Info");
        Print_Patient_Info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Print_Patient_InfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(17, 17, 17)
                                .addComponent(Last_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(17, 17, 17)
                                .addComponent(First_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Search_Name))
                            .addComponent(List_ALL, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Alphabetical, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Alphabetical_Last_Name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Triage_Priority, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(92, Short.MAX_VALUE)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Print_Patient_Info, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(88, 88, 88))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Print_Patient_Info, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Search_Name))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(First_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Last_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(43, 43, 43)
                        .addComponent(List_ALL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Alphabetical)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Alphabetical_Last_Name)
                        .addGap(18, 18, 18)
                        .addComponent(Triage_Priority))
                    .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//Output method to output data
    public String outputformatted(String[][]a,int i){
        String output = "First Name: "+a[i][0]+"\n"+
                "Last Name: "+a[i][1]+"\n"+
                "Triage Priority: "+a[i][2]+"\n"+
                "Blood Pressure: "+a[i][3]+"\n"+
                "Body Temperature: "+a[i][4]+"\n"+
                "Pulse: "+a[i][5]+"\n"+
                "Breathing Rate: "+a[i][6]+"\n"+
                "Description: "+a[i][7]+"\n"+"\n";
       
        return output;
    }
    
    
    
    private void List_ALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_List_ALLActionPerformed
        //Clears text fields
        Output.setText(""); 
        
        //Gets the counter value from array
        int counter = Integer.parseInt(patientinfo[0][8]);
        
        //Loops through the 2d array, and uses output function to output all data
        for (int i = 0; i<counter;i++){
            Output.append(outputformatted(patientinfo,i));
        }
               
       
    }//GEN-LAST:event_List_ALLActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        //Close current screen, open a new previous screen
        setVisible(false);
        new PatientGUI(patientinfo).setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_BackActionPerformed

    private void Search_NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_NameActionPerformed
        // TODO add your handling code here:
        /*
        Following block of code uses linear search to search for a patient entered.
        It loops through the array, and see if any of the first name+ last name values
        match the inputted data. Output function is then used to output data of desired patient data
        */
        
        int x=0;
        Output.setText("");
        String firstname, lastname;
        int counter = Integer.parseInt(patientinfo[0][8]);
        firstname=(First_Name.getText()).toString();
        lastname=(Last_Name.getText()).toString();
        First_Name.setText("");
        Last_Name.setText("");
        for (int i = 0; i<counter; i++){
            if(((patientinfo[i][0]).equals(firstname))&&(patientinfo[i][1]).equals(lastname)){
                    x=1;
                    Output.append(outputformatted(patientinfo,i));
            } 
        }
        
        
        
        //If x was not increased, then patient was not found.
        if(x==0){
            Output.append("Patient Not Found."+"\n"+"Please check your spelling.");
        }
        
        
        
        
    }//GEN-LAST:event_Search_NameActionPerformed

    private void AlphabeticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlphabeticalActionPerformed
        // 
        Output.setText("");
        int counter = Integer.parseInt(patientinfo[0][8]);
        
        //Using counter value to make a new array of first names, loops through patient info
        //array and enters firstname data
        String[]firstname=new String[counter];
        for(int i = 0; i<counter;i++){
            firstname[i]=patientinfo[i][0];
        }
        
        /*
        Bubble sort is used to sort the first names alphabetically. Compare method is used
        to see if adjacent items are alphabettically larger then, smaller then, or equal to.
        I was not able to figure out how to use the firstname data to reorganize all the data
        of the original 2d array. Due to this, only the first names are alphabetically organized,
        and the 2d array remains unmodified
        */
        for (int i = 0;i<counter-1;i++){
            for (int j=0;j<counter-1-i;j++){
                 String a = firstname[j];
                 String b = firstname[j+1];
                 int compare = a.compareTo(b);
                 if (compare>0){
                     String temp = firstname[j];
                     firstname[j] = firstname[j+1];
                     firstname[j+1] = temp;
                 }
  
            }
           
        }
        
        for (int i = 0;i<counter;i++){
            Output.append(firstname[i]+"\n");
        }
        
    }//GEN-LAST:event_AlphabeticalActionPerformed

    private void Alphabetical_Last_NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Alphabetical_Last_NameActionPerformed
        // TODO add your handling code here:
        
        //The same method as above is used, except organized by lastname alphabetically
        Output.setText("");
        int counter = Integer.parseInt(patientinfo[0][8]);
        String[]lastname=new String[counter];
        for(int i = 0; i<counter;i++){
            lastname[i]=patientinfo[i][1];
        }
        for (int i = 0;i<counter-1;i++){
            for (int j=0;j<counter-1-i;j++){
                 String a = lastname[j];
                 String b = lastname[j+1];
                 int compare = a.compareTo(b);
                 if (compare>0){
                     String temp = lastname[j];
                     lastname[j] = lastname[j+1];
                     lastname[j+1] = temp;
                 }
  
            }
           
        }
        
        for (int i = 0;i<counter;i++){
            Output.append(lastname[i]+"\n");
        }
    }//GEN-LAST:event_Alphabetical_Last_NameActionPerformed

    private void Triage_PriorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Triage_PriorityActionPerformed
        //Output is cleared
        Output.setText("");
        //Determining counter value
        int counter = Integer.parseInt(patientinfo[0][8]);
        
        
        /*5 for loops are used to loop through the patient array and find triage importances
        For the first for loop, if triage 5 is found, then output it using the output function
        Once all the triage 5 patients have been outputted, the second for loop will loop to find
        triage 4 patients, and will output all patients with 4 importance. This will continue
        down to importance 1 for the 5th for loop
        */
        for (int i = 0;i<counter;i++){
            if (patientinfo[i][2].equals("5")){
                Output.append(outputformatted(patientinfo,i)); 
            }                      
        }
        for (int i = 0;i<counter;i++){
            if (patientinfo[i][2].equals("4")){
                Output.append(outputformatted(patientinfo,i)); 
            }                      
        }
        for (int i = 0;i<counter;i++){
            if (patientinfo[i][2].equals("3")){
                Output.append(outputformatted(patientinfo,i)); 
            }                      
        }
        for (int i = 0;i<counter;i++){
            if (patientinfo[i][2].equals("2")){
                Output.append(outputformatted(patientinfo,i)); 
            }                      
        }
        for (int i = 0;i<counter;i++){
            if (patientinfo[i][2].equals("1")){
                Output.append(outputformatted(patientinfo,i)); 
            }                      
        }
    }//GEN-LAST:event_Triage_PriorityActionPerformed

    private void Print_Patient_InfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Print_Patient_InfoActionPerformed
        // TODO add your handling code here:
        //Close current window, and open new printpatientinfo window
        setVisible(false);
        new PrintPatientInfo(patientinfo).setVisible(true);
    }//GEN-LAST:event_Print_Patient_InfoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Alphabetical;
    private javax.swing.JButton Alphabetical_Last_Name;
    private javax.swing.JButton Back;
    private javax.swing.JTextField First_Name;
    private javax.swing.JTextField Last_Name;
    private javax.swing.JButton List_ALL;
    private javax.swing.JTextArea Output;
    private javax.swing.JButton Print_Patient_Info;
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JButton Search_Name;
    private javax.swing.JButton Triage_Priority;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    // End of variables declaration//GEN-END:variables
}
